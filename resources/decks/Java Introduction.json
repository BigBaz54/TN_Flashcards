{
  "cards": [
    {
      "question": "Given ... \u003eUse a while loop and iterator to loop through each property.",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-6210522710066.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given\u0026nbsp; ... \u003eWhat will the output be in the console?",
      "answer": "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 3 at com.designcortex.MyApp.main(MyApp.java:29)Java Result: 1",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-8572754722856.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given ... \u003eWhat will be the output to the console?",
      "answer": "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 2 at com.designcortex.MyApp.main(MyApp.java:29)",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-8662949036087.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given ... \u003eHow do we allow the program to continue running if there is an error in any of these statements (3 commands)?",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-8796093022246.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given ... \u003e...then some unknown String is assigned to textVal......then...",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-9195524980774.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given ... \u003e...then some unknown String is assigned to textVal......then...",
      "answer": "try {  val \u003d Integer.parseInt(textVal);} catch (NumberFormatException | ArithmeticException e){  //place holder for logic}",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-9195524980774.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given ... \u003eAdd a block that runs for all caught exceptions after the blocks for specific exceptions has been executed (one command).",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-10037338570888.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Why is there an error in the following? ... \u003e",
      "answer": "catch (Exception e) will catch all exceptions so the NumberFormatException is superfluous as it will never run.\u0026nbsp;",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-10230612099234.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "GivenIn order to get the following output:zbreplace the blank in the following: ... \u003e\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; _____",
      "answer": "throw e;",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-10552734646386.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given ... \u003eWhat would be the polite way to write the function definition for customParseInteger?",
      "answer": "Use throws NumberFormatException, ArithmeticExceptionExample:This way the programmer knows if a function is capable of throwing an exception or not and can plan accordingly.\u0026nbsp;",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-10896332030092.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Why is there an error here, ... \u003ebut not here,",
      "answer": "When you throw a new exception and do not catch it, the parent function must have a throws in its function definition.\u0026nbsp;Example:",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-11652246274117.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Will the following not compile? ... \u003e",
      "answer": "It will compile fine.\u0026nbsp;IOException inherits from Exception",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-11836929867851.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Is the following legal, since we are throwing Exception and not IOException? ... \u003e",
      "answer": "Since Java 7 this is legal.",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-12060268167311.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "If you want to protect the variable e from being rewritten what do you add? ... \u003e",
      "answer": "add finalExample:Now the compiler and code hinting tells you where the error is.",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-12317966205091.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given ... \u003eWhy is customThrow1 not reporting an error but customThrow2 is?",
      "answer": "NullPointerException is an unchecked exception.customThrow2 must be the following:",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-12872016986241.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Unchecked exceptions are all subclasses of ____ ?",
      "answer": "RuntimeException",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "What is always imported by default and is not necessary to explicitly import?",
      "answer": "import java.lang.*;",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "How do you suspend runtime for 5 seconds (3 commands)?",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "What is the difference between each of the following?overload a methodoverride a methodoverwrite a method",
      "answer": "overload\u0026nbsp;overrideoverwriting methods of an object is more frequently talked about in JavaScript.Example:Object.toString \u003d function(){\u0026nbsp;   return \"this function has been overwriten\";};",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Convert the following class so it can be executed by in a thread (4 commands): ... \u003e",
      "answer": "4 commands:implementsRunnable@overridepublic void run()",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-15187004358709.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Run the following class in a thread: ... \u003e",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-15302968475754.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given\u0026nbsp; ... \u003eAdd a Dog.abort() method that will stop execution of Dog.run at the \"//abort here\" comment",
      "answer": "Threads cannot be aborted without custom logic to do so, otherwise run() will execute until completion or until System.exit(0) or the user terminates the program.\u0026nbsp;",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-15698105467295.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Get the thread where the current block is running",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "What is current thread ... \u003e",
      "answer": "_go",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-16187731738748.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Compile a class from the command-line and then execute it.",
      "answer": "\u0026gt; javac JavaClass.java\u0026gt; java JavaClass",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "What format is the resulting *.class file in that the Java compiler produces?",
      "answer": ".class files are in byte code.\u0026nbsp;This is code that is optimized for the Java Virtual Machine (JVM). The JVM can only run byte code. There are also other languages like Scala that compile to Java byte code.",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Given ... \u003eAdd an inner class InnerPuppy",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-17081084936245.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given Dog.java ... \u003eAnd in MyApp.java",
      "answer": "InnerPuppy is not public it is only available in Dog.java it would need to be like the following:",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-17733919965291.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given ... \u003e",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-18141941858461.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Create a thread that uses an anonamous inner class.\u0026nbsp;",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Given ... \u003eDo the same thing using a lambda.",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-18502719111308.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given ... \u003eReplace actionPerformed() with an anonomous inner class in init()",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-18872086299131.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given ... \u003eReplace the inner anonomous class with a lambda.",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-19138374271145.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "How could you simplify this lambda expession? ... \u003e",
      "answer": "Remove the type declaration to make it an implied type declaration.\u0026nbsp;",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-19366007537765.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given ... \u003eHow could you make this shorter?",
      "answer": "This is a stylistic choice. Many programmers think that this technique should be used sparingly only in sistuations where a function only has 2 or 3 variables of the same type and some programmers would prefer that you use this style not at all.\u0026nbsp;",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-19473381720123.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Get the system independant directory separator",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Open a file steam",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "What is a better way to write the following (two changes): ... \u003e",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-19816979103851.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given the following: ... \u003eAdd the logic to read the file contents into a string (5 lines)",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-19958713024634.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Fill in the blanks to read input from the keyboard in the console (6 things).\u0026nbsp;\ntry (\n        ____ i \u003d \n        new ____(____)\n    )\n{\n    int in;\n    char inChar;\n    do {\n        in \u003d i.____();\n        inChar \u003d (char) in;\n    } while (\n        (in !\u003d ____) \u0026amp;\u0026amp; (inChar !\u003d ____)\n    );\n    i.____();\n} catch (Exception e){}\n",
      "answer": "try (\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; BufferInputStream i \u003d\u0026nbsp;\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; new BufferInputStream(System.in)\u0026nbsp; \u0026nbsp; ){\u0026nbsp; \u0026nbsp; int in;\u0026nbsp; \u0026nbsp; char inChar;\u0026nbsp; \u0026nbsp; do {\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; in \u003d i.read();\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; inChar \u003d (char) in;\u0026nbsp; \u0026nbsp; } while (\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; (in !\u003d -1) \u0026amp;\u0026amp; (inChar !\u003d \u0027\\n\u0027)\u0026nbsp; \u0026nbsp; );\u0026nbsp; \u0026nbsp; i.close();} catch (Exception e){}\n",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "1.) Fill in the blanks to write a string to a file (7 words).\n____ dat \u003d new ____(____);try (\n        ____ stream \u003d         new ____(____)    )\n{\n    String name \u003d \"1234\";\n    byte[] nameBytes \u003d name.____();    stream.____(nameBytes, 0, nameBytes.length);    stream.____();} catch (Exception e){}\n\n2.) What will happen if the file already exists with the text \"1234567\" in it?",
      "answer": "1.)\nFile dat \u003d new File(\"filename.txt\");\ntry (\n        FileOutputStream stream \u003d \n        new FileOutputStream(dat)\n    )\n{\n    String name \u003d \"1234\";\n    byte[] nameBytes \u003d name.getBytes();\n    stream.write(nameBytes, 0, nameBytes.length);\n    stream.close();\n} catch (Exception e){}\n\n\n2.) The file will contain 1234. This overwrites the previous contents of the file. ",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Given ... \u003eAt what point is the file over written?",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-22720376996037.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given ... \u003eChange the code to make the string add to the end of the file.",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-22930830393535.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Windows (\u0027\\r\\n\u0027), Linux(\u0027\\n\u0027) and OSX(\u0027\\n\u0027) use different strings to represent line breaks for text files. Get a system dependant newline.\u0026nbsp;",
      "answer": "String newline \u003d System.getProperty(\"line.separator\");\n",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "If you run the following in NetBeans to where will the file be written? ... \u003e",
      "answer": "In the root of the project under the files tab.\u0026nbsp;",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-23476291240115.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given the file config.properties ... \u003eand the following code:",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-23669564768345.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given the file ... \u003eand the following code:",
      "answer": "1.)2.) Results in the following:",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-24240795418713.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given the following code: ... \u003eChange and save a property (4 lines).",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-24378234372293.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given the following code and file: ... \u003e",
      "answer": "The text \"updated\" has been added as a comment along with the date the file was updated. The property windowWidth has been updated as well.",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-24489903522091.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given the following code: ... \u003eAdd a new property and save it to the file (4 lines).",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-24885040513217.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "What does JAX-WS stand for?",
      "answer": "Java API for XML Web Services.",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "What does SOAP stand for?",
      "answer": "Simple Object Access Protocol (SOAP)",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "What is the relationship between SOAP and JAX-WS.",
      "answer": "JAX-WS supports web services that can be implemented using SOAP or REST",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "What does REST stand for?",
      "answer": "Representational State Transfer (REST)",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Define an interface called SquareRootServer with a function getSquareRoot that returns a double and takes a double as input.",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "What needs to be added to this interface to make each method accessible via a SOAP web service (6 lines of code)? ... \u003e",
      "answer": "package com.designcortex.ws;\n\nimport javax.jws.*;\nimport javax.jws.soap.*;\nimport javax.jws.soap.SOAPBinding.*;\n\n@WebService\n@SOAPBinding(style \u003d Style.RPC)\n\npublic interface SquareRootServer {\n    @WebMethod \n    double getSquareRoot(double input);\n    @WebMethod \n    String getTime();\n}\n\nmove code in a package called wsimport javax.jws.* packageimport java web service package SOAP protocols\u0026nbsp;@WebService@SOAPBinding@WebMethod annotation",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-25701084299330.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given the following interface ... \u003eAnd a seperate file SquareRootServerImpl.java, fill in the blanks in SquareRootServerImpl.java to create a service implementation bean (4 blanks).\npackage com.designcortex.ws;\n\nimport java.util.Date;\nimport javax.jws.*;\n\n@____(____ \u003d \"____\")\n\npublic class SquareRootServerImpl ____ SquareRootServer {\n    \n    @Override\n    public double getSquareRoot(double input){\n        return Math.sqrt(input);\n    }\n    \n    @Override\n    public String getTime(){\n        Date now \u003d new Date();\n        return now.toString();\n    }\n}\n",
      "answer": "package com.designcortex.ws;\n\nimport java.util.Date;\nimport javax.jws.*;\n\n@WebService\n(\n    endpointInterface \u003d \n    \"com.designcortex.ws.SquareRootServer\"\n)\n\npublic class SquareRootServerImpl implements SquareRootServer {\n    \n    @Override\n    public double getSquareRoot(double input){\n        return Math.sqrt(input);\n    }\n    \n    @Override\n    public String getTime(){\n        Date now \u003d new Date();\n        return now.toString();\n    }\n}\n",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-26912265076894.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given the following code fill in the blanks to deploy the web service to http://127.0.0.1:5335/service\u0026nbsp;assuming that SquareRootServerImpl was correctly set up.\npackage com.designcortex;\n\nimport com.designcortex.ws.*;\nimport ____;\n\npublic class MyApp {\n    public static void main(String[] args)  {\n        SquareRootServerImpl srsi \u003d new SquareRootServerImpl();\n        ____;\n    } \n}\n",
      "answer": "package com.designcortex;\n\nimport com.designcortex.ws.*;\nimport javax.xml.ws.*;\n\npublic class MyApp {\n    public static void main(String[] args)  {\n        SquareRootServerImpl srsi \u003d new SquareRootServerImpl();\n        Endpoint.publish(\"http://127.0.0.1:5335/service\", srsi);\n    } \n}\n",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "If you run the following code from NetBeans how do you terminate it?Endpoint.publish(\"http://127.0.0.1:5335/service\", serviceImpl);\n",
      "answer": "Menu -\u0026gt; run -\u0026gt; Stop Build / Run",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Given the following line of code:Endpoint.publish(\"http://127.0.0.1:5335/service\", serviceImpl);How do you access the web service definition?",
      "answer": "Go to a browser and loadhttp://127.0.0.1:5335/service?wsdl",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "What does WSDL stand for?",
      "answer": "Web Service Definition LayerNote: pronounced wizdull",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "A(n) ... is a software bundle of related state and behavior. ",
      "answer": "object",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "A ... is a blueprint or prototype from which objects are created. ",
      "answer": "class",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "... is a collection of methods with no implementation.",
      "answer": "An interface",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "... is a namespace for organizing classes and interfaces in a logical manner. ",
      "answer": "A package",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Each ... is allowed to have one direct superclass.",
      "answer": "class",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Each ... has the potential for an unlimited number of subclasses.",
      "answer": "superclass",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Each class is allowed to have one ... superclass.",
      "answer": "direct",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Each class is allowed to have one direct ...",
      "answer": "superclass",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "To create a subclass, use the word ..., followed by the name of the class to inherit from.",
      "answer": "the extends keyword",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "To create a ..., use the extends keyword, followed by the name of the class to inherit from.",
      "answer": "subclass",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Write the first line of\u0026nbsp;\u0026nbsp;code for subclass, MountainBike, that extends Bicycle.",
      "answer": "public class MountainBike extends Bicycle {",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "... gives subclasses all the same fields and methods as superclasses. ",
      "answer": "Inheritance",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "... forms the object\u0027s interface with the outside world.",
      "answer": "Methods",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "... an interface allows a class to become more formal about the behavior it promises to provide. (hint: a verb)",
      "answer": "Implementing",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Write the first line of code for a new class, ACMEBicycle, to implement interface Bicycle.",
      "answer": "class ACMEBicycle implements Bicycle {",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Generally, ... contains only a group of related methods with empty bodies. ",
      "answer": "an interface",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "If a class claims to implement an interface, all methods defined by that interface ... before the class will successfully compile.",
      "answer": "must appear in its source code",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "All objects have the capacity for ...",
      "answer": "state (fields) and behavior (methods)",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "... represent an object\u0027s behavior.",
      "answer": "Methods",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "... represent an object\u0027s state.",
      "answer": "Fields or Member variables",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Hiding internal state and requiring all interaction to be performed through an object\u0027s methods is known as ...",
      "answer": "data encapsulation",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "... is an instance of a class.",
      "answer": "An object",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "API stands for ... ",
      "answer": "Application Programming Interface",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Create a public class called Animal in the package com.designcortex\u0026nbsp;",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Add a constructor with the parameter weight\u0026nbsp;to the class and assign it to a class private field (member) called weight. ... \u003e",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-1022202216520.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given ... \u003eWhat is the output when you call the following:",
      "answer": "The output is\u0026nbsp;Animal constructor called\u0026nbsp;Dog constructor calledThis is because the parent class has no parameters so super() is automatically called before the child class\u0027 constructor.",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-2087354106043.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "What is wrong with the following? ... \u003eHow do you fix it?",
      "answer": "Add super() at the top of the constructor.Super can only be used at the top of the constructor.\u0026nbsp;",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-2224793059509.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "What is wrong with the following in the file Dog.java: ... \u003e",
      "answer": "Animal needs to be in its own file Animal.java or remove the public word inorder to change to the following:This makes it so that Animal is only accessible to the Dog class.",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-2478196129949.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Convert an Integer object to a primativeInteger a \u003d new Integer(1024);",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Convert a number represented as a string to a primative integerString a \u003d \"1024\";",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Create a 10 by 10 two dimentional array of booleans called payOffMatrix",
      "answer": "boolean [] [] payOffMatrix \u003d new boolean[10][10];\n",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Create a list that holds a maximum of 10 Strings called names.",
      "answer": "Arrays have a set length at the time of instantiation.\u0026nbsp;",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Create an array (called names) of 3 strings \"joe\", \"john\", \"paul\" at the time of intantiation.",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Given the class Dog\u0026nbsp; ... \u003eCreate an array of Dog objects at the time of instantiation.",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-3809635991634.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "What is the difference between a parameter and an argument?",
      "answer": "A parameter is the variable which is part of the method’s signature (method declaration). An argument is an expression used when calling the method.",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Givenint result \u003d 12 % 10;What is result?",
      "answer": "212 / 10 has a remainder of 2. % is the modulus operator.",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "What does each appended at the end of a number literal mean?a.) 10.01Fb.) 10Lc.) 10.01D",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "What is wrong with the following: ... \u003e",
      "answer": "10.01 is a double by default and is being converted to a float. Doubles are larger than floats so the compiler is making sure that you don\u0027t loose any precision during the conversion.\u0026nbsp;Of course in this case you wouldn\u0027t loose any precision but the compiler uses brute force rules, not case by case checking. ",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-4372276707352.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "What is wrong with this? ... \u003e",
      "answer": "Only long integers support underscore notationNote:This notation is only supported in Java 7+",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-4548370366482.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Declare an array of Strings that does not have a fixed length and add one element.",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "What is the disadvantage of not using a generic (the element type)?ArrayList s \u003d new ArrayList();",
      "answer": "Catches type errors at compile time.A generic type definition like the following:ArrayList\u0026lt;String\u0026gt; s \u003d new ArrayList\u0026lt;String\u0026gt;();Allows the compiler to make sure the list only contains strings. ",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Given ... \u003eWhat is result?",
      "answer": "2The initial capacity ( public ArrayList(int initialCapacity) ) of the list only preallocates memory. It does not affect the size of the list.\u0026nbsp;",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-6545530159171.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given ... \u003eRetrieve \"Dan\" from the list.",
      "answer": "String result \u003d names.get(1);",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-6884832575539.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given ... \u003eTest with an if statement that a string someName is in names.",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-6944962117692.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given ... \u003eDelete \"Dan\" from the list (two methods)",
      "answer": "names.remove(1);ornames.remove(\"Dan\");",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-7215545057339.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given ... \u003eWhy is the for statement\u0026nbsp;reporting an error?",
      "answer": "No generic infront of the type.",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-7413113553014.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given ... \u003euse a for loop to print out all the names",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-8516920148055.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given ... \u003eSort the names alphanumerically.\u0026nbsp;",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-8667244003406.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "What does AWT in the java.awt package stand for?",
      "answer": "Abstract Window Toolkit",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Given the String variables someName and\u0026nbsp;someOtherName test if they are equal.",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Given ... \u003eOverride the type method in Dog so that type returns the String \"Dog\"",
      "answer": "@Override is a predefined annottion type.\u0026nbsp;Annotations, a form of metadata, provide data about a program for the following uses:\u0026nbsp; \u0026nbsp; Information for the compiler\u0026nbsp;\u0026nbsp; \u0026nbsp; Compile-time and deployment-time processing\u0026nbsp;\u0026nbsp; \u0026nbsp; Runtime processing\u0026nbsp;\u0026nbsp; \u0026nbsp; (Some annotations are available to be examined at runtime.)",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-9216999817342.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Given ... \u003eAdd a method that returns a String.",
      "answer": "",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-9384503541810.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "Make the following work by writing the classes Dog and Animal. What is this called? ... \u003e",
      "answer": "Static Nested ClassAs with class methods and variables, a static nested class is associated with its outer class. And like static class methods, a static nested class cannot refer directly to instance variables or methods defined in its enclosing class: it can use them only through an object reference.",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-9766755631138.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "How do you know you can use the result of entrySet()  to print a list?How do you know you can use \"for\" on any given object?Example : ... \u003e",
      "answer": "The object must impliment the interface Iterable.",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": [],
      "media": {
        "file": "paste-10054518440013.jpg",
        "type": "IMG"
      }
    },
    {
      "question": "The minimum code to create a window. Fill in the blanks (7 lines):import _____;public class MyApp extends _____{\u0026nbsp; \u0026nbsp; public MyApp(){\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; _____(\"Learn Java Frame\");\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; this._____(350,125);\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; this._____(JFrame.EXIT_ON_CLOSE);\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; this._____(true);\u0026nbsp; \u0026nbsp; }\u0026nbsp; \u0026nbsp; public static void main(String[] args) \u0026nbsp;{\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; _____;\u0026nbsp; \u0026nbsp; }}",
      "answer": "import javax.swing.*;public class MyApp extends JFrame{        public MyApp(){        super(\"Learn Java Frame\");        this.setSize(350,125);        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        this.setVisible(true);    }    public static void main(String[] args)  {        MyApp frame \u003d new MyApp();    }    }",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Fill in the blanks to create a custom swing component:class MyComponent extends _____ {\u0026nbsp; \u0026nbsp; public MyComponent() {\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;_____();\u0026nbsp; \u0026nbsp; }}",
      "answer": "class MyComponent extends JPanel {\u0026nbsp; \u0026nbsp; public MyComponent() {\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; super();\u0026nbsp; \u0026nbsp; }}",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "In order for the below to work, what interface and function(s) does \"this\" need to implement (3 things - interface,  function override, and event)?JButton okBtn \u003d new JButton(\"OK\");okBtn.addActionListener(this);",
      "answer": "public class MyApp extends JFrame implements ActionListener {    @Override    public void actionPerformed(ActionEvent ae){        System.out.println(\"button clicked\");    }}",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Given the following test for if okBtn was clicked.public class MyApp extends JFrame implements ActionListener {\u0026nbsp; \u0026nbsp; public JButton okBtn \u003d new JButton(\"OK\");\u0026nbsp; \u0026nbsp; @Override\u0026nbsp; \u0026nbsp; public void actionPerformed(ActionEvent ae){\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; ________\u0026nbsp; \u0026nbsp; }......}",
      "answer": "public class MyApp extends JFrame implements ActionListener {\u0026nbsp; \u0026nbsp; public JButton okBtn \u003d new JButton(\"OK\");\u0026nbsp; \u0026nbsp; @Override\u0026nbsp; \u0026nbsp; public void actionPerformed(ActionEvent ae){\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; Object source \u003d ae.getSource();\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; if (source \u003d\u003d okBtn){\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; System.out.println(\"button\");\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; }\u0026nbsp; \u0026nbsp; }......}",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Fill in the blank so that you declare an array of object literals.Object [] [] table \u003d _____",
      "answer": "Object [] [] table \u003d {\u0026nbsp; \u0026nbsp;{ \"A\",\"B\",\"C\"},\u0026nbsp; \u0026nbsp;{ \"D\",\"E\",\"F\"}\u0026nbsp;};",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Vocabulary:Because the following is of a fixed length it is said to be a(n) \"____\" array.String [] s \u003d new String[10];",
      "answer": "Immutable array",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Instantiate a hash map called phonebook with the key being a name and the value being the phone number.",
      "answer": "HashMap\u0026lt;String,Long\u0026gt; phonebook \u003d new HashMap\u0026lt;String, Long\u0026gt;();\n",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "GivenHashMap\u0026lt;String, Long\u0026gt; phonebook \u003d new HashMap\u0026lt;String, Long\u0026gt;();add an entry into the phonebook.",
      "answer": "phonebook.put(\"George Dunbar\", 4065877764L);\n",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "GivenHashMap\u0026lt;String, Long\u0026gt; phonebook \u003d new HashMap\u0026lt;String, Long\u0026gt;();retrieve a phone number.",
      "answer": "Long number \u003d phonebook.get(\"George Dunbar\");",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "Given\u0026nbsp;HashMap\u0026lt;String, Long\u0026gt; phonebook \u003d new HashMap\u0026lt;String, Long\u0026gt;();Retrieve a number and if the key does not exist return -1.",
      "answer": "Long number \u003d phonebook.getOrDefault(\"Samwise Gamgee\", -1);",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "GivenHashMap\u0026lt;String, Long\u0026gt; p \u003d new HashMap\u0026lt;String, Long\u0026gt;();p.put(\"George Dunbar\", 4065705918L);p.put(\"Nicholas Dunbar\", 4065705878L);Use a for loop to get each key and value.",
      "answer": "for( Map.Entry\u0026lt;String, Long\u0026gt; e : p.entrySet() ){\u0026nbsp; \u0026nbsp;String output \u003d e.getKey()+\":\"+e.getValue();}",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "What arguments does the\u0026nbsp;HashMap constructor take?HashMap p \u003d new HashMap();",
      "answer": "HashMap p \u003d new HashMap(preAllocatedBuckets, percentFullBeforeAllocation);int preAllocatedBuckets\u0026nbsp;how many key-value stores are allocate at the time of instantiation.float precentFullBeforeAllocation\u0026nbsp;if precentFullBeforeAllocation equals .7 then when .7 percent of\u0026nbsp;preAllocatedBuckets are filled allocated another\u0026nbsp;preAllocatedBuckets key-value storage slots.\u0026nbsp;",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    },
    {
      "question": "GivenStack\u0026lt;String\u0026gt; s \u003d new Stack\u0026lt;String\u0026gt;();s.push(\"1\");s.push(\"2\");Use a for...loop\u0026nbsp;and an Iterator to loop through the Stack.",
      "answer": "for( Iterator\u0026lt;String\u0026gt; i \u003d s.iterator(); i.hasNext(); ){\u0026nbsp; \u0026nbsp; System.out.println(i.next());\n}",
      "probability": 1.0,
      "statCard": {
        "nbTimesSeen": 0,
        "nbTimesCorrect": 0,
        "nbTimesWrong": 0,
        "timesSpent": []
      },
      "tags": []
    }
  ],
  "tags": [],
  "statDeck": {
    "nbTimesOpened": 0,
    "nbTimesCorrect": 0,
    "nbTimesWrong": 0,
    "nbCardsSeen": 0,
    "timesSpent": 0,
    "lastOpened": 1673011012974,
    "creationDate": 1673011012974
  },
  "name": "Java Introduction",
  "description": "Please see the shared deck page for more info."
}